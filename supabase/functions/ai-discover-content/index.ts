import "jsr:@supabase/functions-js/edge-runtime.d.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization, X-Client-Info, Apikey",
};

function getLanguageForCountry(countryCode: string): string {
  const countryToLanguage: { [key: string]: string } = {
    "TR": "tr-TR",
    "FR": "fr-FR",
    "DE": "de-DE",
    "ES": "es-ES",
    "IT": "it-IT",
    "PT": "pt-PT",
    "BR": "pt-BR",
    "JP": "ja-JP",
    "KR": "ko-KR",
    "CN": "zh-CN",
    "RU": "ru-RU",
    "NL": "nl-NL",
    "PL": "pl-PL",
    "SE": "sv-SE",
    "NO": "nb-NO",
    "DK": "da-DK",
    "FI": "fi-FI",
    "GR": "el-GR",
    "AR": "es-AR",
    "MX": "es-MX",
    "IN": "hi-IN",
  };

  return countryToLanguage[countryCode.toUpperCase()] || "en-US";
}

function getLanguageCode(fullLanguage: string): string {
  return fullLanguage.split("-")[0];
}

function getNoResultsMessage(languageCode: string): string {
  const messages: { [key: string]: string } = {
    "tr": "√úzg√ºn√ºm, bu arama i√ßin sonu√ß bulamadƒ±m. L√ºtfen farklƒ± bir ≈üey deneyin - √∂rneƒüin sadece bir t√ºr veya platform s√∂ylerseniz size harika √∂neriler sunabilirim!",
    "de": "Es tut mir leid, ich konnte keine Ergebnisse f√ºr diese Suche finden. Bitte versuchen Sie etwas anderes - zum Beispiel, nennen Sie einfach ein Genre oder eine Plattform und ich kann Ihnen tolle Empfehlungen geben!",
    "fr": "D√©sol√©, je n'ai pas trouv√© de r√©sultats pour cette recherche. Veuillez essayer quelque chose de diff√©rent - par exemple, mentionnez simplement un genre ou une plateforme et je peux vous donner d'excellentes recommandations!",
    "es": "Lo siento, no pude encontrar resultados para esa b√∫squeda. Por favor, intenta algo diferente - por ejemplo, solo menciona un g√©nero o plataforma y puedo darte excelentes recomendaciones!",
    "it": "Mi dispiace, non ho trovato risultati per questa ricerca. Prova qualcosa di diverso - ad esempio, menziona semplicemente un genere o una piattaforma e posso darti ottimi consigli!",
    "pt": "Desculpe, n√£o encontrei resultados para essa pesquisa. Por favor, tente algo diferente - por exemplo, mencione apenas um g√™nero ou plataforma e posso dar √≥timas recomenda√ß√µes!",
    "nl": "Sorry, ik kon geen resultaten vinden voor die zoekopdracht. Probeer iets anders - bijvoorbeeld, noem gewoon een genre of platform en ik kan je geweldige aanbevelingen geven!",
    "pl": "Przepraszam, nie znalaz≈Çem wynik√≥w dla tego wyszukiwania. Spr√≥buj czego≈õ innego - na przyk≈Çad, po prostu wymie≈Ñ gatunek lub platformƒô, a mogƒô podaƒá ≈õwietne rekomendacje!",
    "sv": "F√∂rl√•t, jag kunde inte hitta resultat f√∂r den s√∂kningen. F√∂rs√∂k n√•got annat - till exempel, n√§mn bara en genre eller plattform s√• kan jag ge dig fantastiska rekommendationer!",
    "da": "Undskyld, jeg kunne ikke finde resultater for den s√∏gning. Pr√∏v noget andet - for eksempel, n√¶vn bare en genre eller platform, og jeg kan give dig fantastiske anbefalinger!",
    "fi": "Anteeksi, en l√∂yt√§nyt tuloksia t√§lle haulle. Kokeile jotain muuta - esimerkiksi mainitse vain genre tai alusta, niin voin antaa sinulle loistavia suosituksia!",
    "no": "Beklager, jeg fant ingen resultater for det s√∏ket. Pr√∏v noe annet - for eksempel, nevn bare en sjanger eller plattform, s√• kan jeg gi deg flotte anbefalinger!",
    "ru": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ - –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ –∂–∞–Ω—Ä –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –∏ —è —Å–º–æ–≥—É –¥–∞—Ç—å –≤–∞–º –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!",
    "ja": "Áî≥„ÅóË®≥„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÅ„Åù„ÅÆÊ§úÁ¥¢ÁµêÊûú„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇÂà•„ÅÆ„ÇÇ„ÅÆ„ÇíË©¶„Åó„Å¶„Åè„Å†„Åï„ÅÑ - „Åü„Å®„Åà„Å∞„ÄÅ„Ç∏„É£„É≥„É´„ÇÑ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„ÇíÊåô„Åí„Å¶„ÅÑ„Åü„Å†„Åë„Çå„Å∞„ÄÅÁ¥†Êô¥„Çâ„Åó„ÅÑ„Åä„Åô„Åô„ÇÅ„Çí„ÅîÊèê‰æõ„Åß„Åç„Åæ„ÅôÔºÅ",
    "ko": "Ï£ÑÏÜ°Ìï©ÎãàÎã§. Ìï¥Îãπ Í≤ÄÏÉâÏóê ÎåÄÌïú Í≤∞Í≥ºÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Îã§Î•∏ Í≤ÉÏùÑ ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî - ÏòàÎ•º Îì§Ïñ¥ Ïû•Î•¥ÎÇò ÌîåÎû´ÌèºÎßå Ïñ∏Í∏âÌïòÎ©¥ ÌõåÎ•≠Ìïú Ï∂îÏ≤úÏùÑ Ìï¥ÎìúÎ¶¥ Ïàò ÏûàÏäµÎãàÎã§!",
    "zh": "Êä±Ê≠âÔºåÊàëÊâæ‰∏çÂà∞ËØ•ÊêúÁ¥¢ÁöÑÁªìÊûú„ÄÇËØ∑Â∞ùËØïÂÖ∂‰ªñÂÜÖÂÆπ - ‰æãÂ¶ÇÔºåÂè™ÈúÄÊèêÂèäÁ±ªÂûãÊàñÂπ≥Âè∞ÔºåÊàëÂ∞±ÂèØ‰ª•‰∏∫ÊÇ®Êèê‰æõÂæàÊ£íÁöÑÊé®ËçêÔºÅ",
    "en": "Sorry, I couldn't find results for that search. Please try something different - for example, just mention a genre or platform and I can give you great recommendations!",
  };

  return messages[languageCode] || messages["en"];
}

function getOffTopicMessage(languageCode: string): string {
  const messages: { [key: string]: string } = {
    "tr": "Ben sadece film ve dizi √∂nerileri konusunda yardƒ±mcƒ± olabilirim. Diƒüer konular hakkƒ±nda bilgim yok.",
    "de": "Ich kann nur bei Film- und Serienempfehlungen helfen. Ich habe keine Informationen zu anderen Themen.",
    "fr": "Je ne peux vous aider qu'avec des recommandations de films et s√©ries. Je n'ai pas d'informations sur d'autres sujets.",
    "es": "Solo puedo ayudar con recomendaciones de pel√≠culas y series. No tengo informaci√≥n sobre otros temas.",
    "it": "Posso aiutarti solo con raccomandazioni di film e serie TV. Non ho informazioni su altri argomenti.",
    "pt": "S√≥ posso ajudar com recomenda√ß√µes de filmes e s√©ries. N√£o tenho informa√ß√µes sobre outros assuntos.",
    "nl": "Ik kan alleen helpen met film- en serieaanbevelingen. Ik heb geen informatie over andere onderwerpen.",
    "pl": "Mogƒô pom√≥c tylko z rekomendacjami film√≥w i seriali. Nie mam informacji na inne tematy.",
    "sv": "Jag kan bara hj√§lpa till med film- och serierekommendationer. Jag har ingen information om andra √§mnen.",
    "da": "Jeg kan kun hj√¶lpe med film- og serieanbefalinger. Jeg har ingen information om andre emner.",
    "fi": "Voin auttaa vain elokuva- ja sarjasuosituksissa. Minulla ei ole tietoa muista aiheista.",
    "no": "Jeg kan bare hjelpe med film- og serieanbefalinger. Jeg har ingen informasjon om andre emner.",
    "ru": "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–æ–ª—å–∫–æ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤. –£ –º–µ–Ω—è –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—Ä—É–≥–∏—Ö —Ç–µ–º–∞—Ö.",
    "ja": "Êò†Áîª„ÇÑ„ÉÜ„É¨„ÉìÁï™ÁµÑ„ÅÆ„Åä„Åô„Åô„ÇÅ„Å´„Å§„ÅÑ„Å¶„ÅÆ„Åø„ÅäÊâã‰ºù„ÅÑ„Åß„Åç„Åæ„Åô„ÄÇ‰ªñ„ÅÆ„Éà„Éî„ÉÉ„ÇØ„Å´Èñ¢„Åô„ÇãÊÉÖÂ†±„ÅØÊåÅ„Å£„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ",
    "ko": "ÏòÅÌôî Î∞è TV ÌîÑÎ°úÍ∑∏Îû® Ï∂îÏ≤úÏóê ÎåÄÌï¥ÏÑúÎßå ÎèÑÏõÄÏùÑ ÎìúÎ¶¥ Ïàò ÏûàÏäµÎãàÎã§. Îã§Î•∏ Ï£ºÏ†úÏóê ÎåÄÌïú Ï†ïÎ≥¥Îäî ÏóÜÏäµÎãàÎã§.",
    "zh": "ÊàëÂè™ËÉΩÂ∏ÆÂä©Êé®ËçêÁîµÂΩ±ÂíåÁîµËßÜËäÇÁõÆ„ÄÇÊàëÊ≤°ÊúâÂÖ≥‰∫éÂÖ∂‰ªñ‰∏ªÈ¢òÁöÑ‰ø°ÊÅØ„ÄÇ",
    "en": "I can only help you find movies and TV shows. I don't have information about other topics.",
  };

  return messages[languageCode] || messages["en"];
}

interface ContentResult {
  id: number;
  title?: string;
  name?: string;
  content_type: string;
  overview?: string;
  poster_path?: string;
  backdrop_path?: string;
  vote_average?: number;
  release_date?: string;
  first_air_date?: string;
  popularity?: number;
}

interface PersonInfo {
  id: number;
  name: string;
  biography?: string;
  birthday?: string;
  place_of_birth?: string;
  known_for_department?: string;
  profile_path?: string;
}

interface ContentInfo {
  id: number;
  title?: string;
  name?: string;
  content_type: string;
  overview?: string;
  poster_path?: string;
  backdrop_path?: string;
  vote_average?: number;
  release_date?: string;
  first_air_date?: string;
  runtime?: number;
  number_of_seasons?: number;
  director?: string;
  cast?: string[];
  genres?: string[];
}

interface TMDBParams {
  contentType: "movie" | "tv" | "both";
  genres?: number[];
  providers?: number[];
  minRating?: number;
  maxRating?: number;
  yearStart?: number | null;
  yearEnd?: number | null;
  sortBy?: string;
  keywords?: string[];
  locationKeywords?: string[];
  productionCountries?: string[];
  spokenLanguages?: string[];
  personName?: string;
  personRole?: "director" | "actor" | "any";
  directorName?: string | null;
  actorNames?: string[];
  maxSeasons?: number;
  minSeasons?: number;
  minRuntime?: number;
  maxRuntime?: number;
  certification?: string;
  withNetworks?: number[];
  adultContent?: boolean;
  useTrendingAPI?: boolean;
  isPersonQuery?: boolean;
  isContentInfoQuery?: boolean;
  specificTitle?: string;
  detectedMood?: string | null;
  moodConfidence?: number;
  isVagueQuery?: boolean;
}

Deno.serve(async (req: Request) => {
  if (req.method === "OPTIONS") {
    return new Response(null, {
      status: 200,
      headers: corsHeaders,
    });
  }

  try {
    const { query, conversationHistory = [], countryCode = "US" } = await req.json();

    if (!query || typeof query !== "string") {
      return new Response(
        JSON.stringify({ error: "Query is required" }),
        {
          status: 400,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }

    console.log("ü§ñ Processing query:", query);
    console.log("üåç Country code:", countryCode);

    const openAIKey = Deno.env.get("OPENAI_API_KEY");
    const tmdbApiKey = Deno.env.get("TMDB_API_KEY");

    if (!openAIKey || !tmdbApiKey) {
      console.error("‚ùå Missing API keys");
      return new Response(
        JSON.stringify({ error: "API keys not configured", success: false }),
        {
          status: 500,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }

    const params = await parseQueryWithGPT(query, conversationHistory, openAIKey);

    const language = getLanguageForCountry(countryCode);
    const languageCode = getLanguageCode(language);
    console.log(`üåç Detected language: ${language} (code: ${languageCode})`);

    if (params.detectedMood) {
      console.log(`üé≠ Mood detected: ${params.detectedMood} (confidence: ${params.moodConfidence}%)`);
    }

    if (params.isVagueQuery && !params.detectedMood) {
      console.log("üí≠ Vague query with no mood - will show trending content");
    }

    if (params.isOffTopic) {
      return new Response(
        JSON.stringify({
          success: true,
          results: [],
          responseText: getOffTopicMessage(languageCode),
          isOffTopic: true,
          topicChanged: false,
        }),
        {
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }

    let personInfo: PersonInfo | null = null;
    let contentInfo: ContentInfo | null = null;

    if (params.isPersonQuery && params.personName) {
      console.log("üé≠ Person query detected:", params.personName);
      personInfo = await getPersonInfo(params.personName, tmdbApiKey, language);
    }

    if (params.isContentInfoQuery && params.specificTitle) {
      console.log("üé¨ Content info query detected:", params.specificTitle);
      contentInfo = await getContentInfo(
        params.specificTitle,
        params.contentType || "both",
        tmdbApiKey,
        language
      );
    }

    const topicChanged = detectTopicChange(query, conversationHistory, params);
    let results = await searchTMDB(params, tmdbApiKey, countryCode, language);

    if (results.length === 0 && (personInfo || contentInfo)) {
      console.log("üîÑ No direct results, fetching related content...");

      if (personInfo) {
        const personContent = await searchByPerson(
          personInfo.name,
          params.contentType || "both",
          tmdbApiKey,
          undefined,
          language
        );
        results = personContent.slice(0, 20);
        console.log(`‚úÖ Found ${results.length} titles featuring ${personInfo.name}`);
      } else if (contentInfo) {
        const similarContent = await getRelatedContent(
          contentInfo.id,
          contentInfo.content_type,
          tmdbApiKey,
          language
        );
        results = similarContent.slice(0, 20);
        console.log(`‚úÖ Found ${results.length} similar titles`);
      }
    }

    const responseText = await generateFriendlyResponse(
      query,
      params,
      results,
      openAIKey,
      languageCode,
      personInfo,
      contentInfo
    );

    return new Response(
      JSON.stringify({
        success: true,
        results,
        responseText,
        isOffTopic: false,
        topicChanged,
        params,
        personInfo,
        contentInfo,
        detectedMood: params.detectedMood || null,
        moodConfidence: params.moodConfidence || null,
        isVagueQuery: params.isVagueQuery || false,
      }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  } catch (error: any) {
    console.error("‚ùå Error:", error);
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message || "Internal server error",
        results: [],
        responseText: "Sorry, something went wrong.",
      }),
      {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  }
});

function detectTopicChange(
  currentQuery: string,
  history: any[],
  currentParams: any
): boolean {
  if (!history || history.length < 2) return false;

  const lastUserMsg = [...history]
    .reverse()
    .find((msg: any) => msg.role === "user");
  if (!lastUserMsg) return false;

  const current = currentQuery.toLowerCase();
  const newTopicKeywords = [
    "now",
    "instead",
    "switch",
    "change",
    "different",
    "≈üimdi",
    "bunun yerine",
    "ba≈üka",
  ];

  const hasNewTopicIndicator = newTopicKeywords.some((keyword) =>
    current.includes(keyword)
  );

  if (currentParams.specificTitle) return true;

  const hasGenreChange = currentParams.genres && currentParams.genres.length > 0;
  const hasProviderChange = currentParams.providers && currentParams.providers.length > 0;
  const hasPersonChange = currentParams.personName !== null;

  const refiningKeywords = [
    "but",
    "except",
    "with",
    "also",
    "and",
    "plus",
    "ama",
    "ve",
    "ayrƒ±ca",
    "ile",
  ];
  const isRefining = refiningKeywords.some((keyword) => current.includes(keyword));

  if (hasNewTopicIndicator) return true;

  if (!isRefining && (hasGenreChange || hasProviderChange || hasPersonChange)) {
    return true;
  }

  return false;
}

async function generateFriendlyResponse(
  query: string,
  params: any,
  results: ContentResult[],
  apiKey: string,
  languageCode: string,
  personInfo?: PersonInfo | null,
  contentInfo?: ContentInfo | null
): Promise<string> {
  const resultCount = results.length;
  const contentType =
    params.contentType === "movie"
      ? "movies"
      : params.contentType === "tv"
      ? "shows"
      : "titles";

  let contextInfo = "";
  if (personInfo) {
    const age = personInfo.birthday
      ? new Date().getFullYear() - new Date(personInfo.birthday).getFullYear()
      : null;
    contextInfo = `\n\nPerson Info Found:
- Name: ${personInfo.name}
- Age: ${age || "Unknown"}
- Birthday: ${personInfo.birthday || "Unknown"}
- Birthplace: ${personInfo.place_of_birth || "Unknown"}
- Known for: ${personInfo.known_for_department || "Unknown"}
- Biography: ${personInfo.biography?.substring(0, 200) || "N/A"}`;
  }

  if (contentInfo) {
    contextInfo = `\n\nContent Info Found:
- Title: ${contentInfo.title || contentInfo.name}
- Type: ${contentInfo.content_type === "movie" ? "Movie" : "TV Show"}
- Rating: ${contentInfo.vote_average?.toFixed(1) || "N/A"}
- Release: ${contentInfo.release_date || contentInfo.first_air_date || "Unknown"}
- Runtime: ${contentInfo.runtime ? `${contentInfo.runtime} min` : "N/A"}
- Seasons: ${contentInfo.number_of_seasons || "N/A"}
- Director: ${contentInfo.director || "N/A"}
- Cast: ${contentInfo.cast?.slice(0, 3).join(", ") || "N/A"}
- Genres: ${contentInfo.genres?.join(", ") || "N/A"}
- Overview: ${contentInfo.overview?.substring(0, 200) || "N/A"}`;
  }

  if (resultCount === 0 && !personInfo && !contentInfo) {
    console.log("‚ö†Ô∏è No TMDB results found, attempting AI knowledge fallback...");

    // Check if this is a specific scene/quote/detail query
    const isSceneQuery =
      // Speaking/saying patterns
      query.toLowerCase().includes("diye baƒüƒ±r") ||
      query.toLowerCase().includes("diye s√∂yle") ||
      query.toLowerCase().includes("dedi") ||
      query.toLowerCase().includes("says") ||
      query.toLowerCase().includes("said") ||
      query.toLowerCase().includes("yells") ||
      query.toLowerCase().includes("screams") ||
      query.toLowerCase().includes("sings") ||
      query.toLowerCase().includes("quote") ||
      // Scene/action patterns
      query.toLowerCase().includes("sahnesi") ||
      query.toLowerCase().includes("sahne") ||
      query.toLowerCase().includes("scene where") ||
      query.toLowerCase().includes("scene with") ||
      query.toLowerCase().includes("movie where") ||
      query.toLowerCase().includes("show where") ||
      query.toLowerCase().includes("film where") ||
      query.toLowerCase().includes("dizi") ||
      // Clothing/appearance patterns
      query.toLowerCase().includes("giyen") ||
      query.toLowerCase().includes("giydiƒüi") ||
      query.toLowerCase().includes("giymi≈ü") ||
      query.toLowerCase().includes("wearing") ||
      query.toLowerCase().includes("wears") ||
      query.toLowerCase().includes("dressed") ||
      // Action patterns (Turkish)
      query.toLowerCase().includes("ko≈üan") ||
      query.toLowerCase().includes("ko≈ütuƒüu") ||
      query.toLowerCase().includes("dans eden") ||
      query.toLowerCase().includes("dans ettiƒüi") ||
      query.toLowerCase().includes("≈üarkƒ± s√∂yleyen") ||
      query.toLowerCase().includes("aƒülayan") ||
      query.toLowerCase().includes("aƒüladƒ±ƒüƒ±") ||
      // Action patterns (English)
      query.toLowerCase().includes("running") ||
      query.toLowerCase().includes("dancing") ||
      query.toLowerCase().includes("crying") ||
      query.toLowerCase().includes("fighting") ||
      query.toLowerCase().includes("driving") ||
      // Context patterns - person + descriptive action
      (query.match(/\b\w+\s+(giyen|giydiƒüi|ko≈üan|dans\s+eden|where\s+he|where\s+she)/i) !== null);

    if (isSceneQuery) {
      console.log("üé¨ Scene/quote query detected, asking AI for specific title...");

      const scenePrompt = `You are a movie and TV show expert. Identify the EXACT title from this description:

"${query}"

CRITICAL RULES:
- Respond with ONLY the movie/TV show title in its ORIGINAL language (English for Hollywood, Turkish for Turkish content, etc.)
- If you're 100% CERTAIN, respond with just the title: "Title Name"
- If you're NOT certain or don't know, respond with EXACTLY: "UNCERTAIN"
- DO NOT add explanations, years, or extra information
- DO NOT guess if you're not certain

Title:`;

      try {
        const response = await fetch("https://api.openai.com/v1/chat/completions", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${apiKey}`,
          },
          body: JSON.stringify({
            model: "gpt-4o-mini",
            messages: [{ role: "user", content: scenePrompt }],
            max_tokens: 50,
            temperature: 0.1,
          }),
        });

        if (response.ok) {
          const data = await response.json();
          const identifiedTitle = data.choices?.[0]?.message?.content?.trim();

          if (identifiedTitle && identifiedTitle !== "UNCERTAIN" && !identifiedTitle.toLowerCase().includes("uncertain")) {
            console.log(`‚úÖ AI identified title: "${identifiedTitle}"`);
            return `SEARCH_TITLE:${identifiedTitle}`;
          }
        }
      } catch (error) {
        console.error("‚ùå Error identifying title from scene:", error);
      }
    }

    const isInformationalQuery =
      query.toLowerCase().includes("hakkƒ±nda") ||
      query.toLowerCase().includes("about") ||
      query.toLowerCase().includes("ne zaman") ||
      query.toLowerCase().includes("when") ||
      query.toLowerCase().includes("kim") ||
      query.toLowerCase().includes("who") ||
      query.toLowerCase().includes("ka√ß") ||
      query.toLowerCase().includes("how many") ||
      query.toLowerCase().includes("how old") ||
      query.toLowerCase().includes("konusu") ||
      query.toLowerCase().includes("plot") ||
      query.toLowerCase().includes("story") ||
      query.toLowerCase().includes("nerede") ||
      query.toLowerCase().includes("where");

    if (isInformationalQuery) {
      const aiPrompt = `You are a movie and TV show expert. Answer this question using ONLY your certain knowledge:

"${query}"

CRITICAL RULES:
- ONLY answer if you are 100% CERTAIN about the facts (dates, names, numbers)
- Be concise (1-2 sentences max)
- Provide FACTUAL information: ages, birth dates, release dates, directors, actors
- DO NOT mention databases or searching
- If you're NOT 100% certain, respond with EXACTLY: "UNCERTAIN"
- Be natural and conversational
- Speak in the same language as the query

Answer:`;

      try {
        const response = await fetch("https://api.openai.com/v1/chat/completions", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${apiKey}`,
          },
          body: JSON.stringify({
            model: "gpt-4o-mini",
            messages: [{ role: "user", content: aiPrompt }],
            max_tokens: 150,
            temperature: 0.1,
          }),
        });

        if (response.ok) {
          const data = await response.json();
          const aiAnswer = data.choices?.[0]?.message?.content?.trim();

          const isUncertain =
            !aiAnswer ||
            aiAnswer === "UNCERTAIN" ||
            aiAnswer.toLowerCase().includes("don't have") ||
            aiAnswer.toLowerCase().includes("don't know") ||
            aiAnswer.toLowerCase().includes("not sure") ||
            aiAnswer.toLowerCase().includes("uncertain") ||
            aiAnswer.toLowerCase().includes("bilmiyorum") ||
            aiAnswer.toLowerCase().includes("emin deƒüilim");

          if (!isUncertain) {
            console.log("‚úÖ AI provided certain knowledge:", aiAnswer);
            return aiAnswer;
          } else {
            console.log("‚ö†Ô∏è AI is uncertain, providing fallback message");
          }
        }
      } catch (error) {
        console.error("‚ùå Error getting AI answer:", error);
      }
    }

    return getNoResultsMessage(languageCode);
  }

  let moodContext = "";
  if (params.detectedMood && params.moodConfidence && params.moodConfidence > 60) {
    const moodDescriptions: { [key: string]: { [lang: string]: string } } = {
      sad: {
        en: "I noticed you're feeling down. I've found uplifting content to cheer you up!",
        tr: "√úz√ºld√ºƒü√ºn√ºz√º fark ettim. Sizi ne≈üelendirecek i√ßerikler buldum!",
        de: "Ich habe bemerkt, dass Sie sich niedergeschlagen f√ºhlen. Ich habe aufmunternde Inhalte gefunden!",
        fr: "J'ai remarqu√© que vous vous sentez triste. J'ai trouv√© du contenu r√©confortant!",
        es: "Not√© que te sientes triste. ¬°He encontrado contenido animador!"
      },
      happy: {
        en: "Great to see you're in a good mood! Here's some feel-good content to keep the vibe going!",
        tr: "Keyfini√Ωn yerinde olduƒüunu g√∂rmek harika! Ruh halinizi koruyacak i√ßerikler buldum!",
        de: "Sch√∂n zu sehen, dass Sie gute Laune haben! Hier ist fr√∂hlicher Inhalt!",
        fr: "Ravi de voir que vous √™tes de bonne humeur! Voici du contenu joyeux!",
        es: "¬°Genial verte de buen humor! ¬°Aqu√≠ hay contenido alegre!"
      },
      bored: {
        en: "Feeling bored? I've got exciting, high-energy content to grab your attention!",
        tr: "Sƒ±kƒ±lƒ±yor musun? Dikkatini √ßekecek heyecanlƒ± i√ßerikler buldum!",
        de: "Gelangweilt? Ich habe spannende, energiegeladene Inhalte gefunden!",
        fr: "Vous vous ennuyez? J'ai trouv√© du contenu passionnant et √©nergique!",
        es: "¬øAburrido? ¬°Tengo contenido emocionante y energ√©tico!"
      },
      excited: {
        en: "Love the energy! I've found thrilling content that matches your excitement!",
        tr: "Bu enerji harika! Heyecanƒ±nƒ±za uygun adrenalin dolu i√ßerikler buldum!",
        de: "Tolle Energie! Ich habe aufregende Inhalte gefunden!",
        fr: "J'adore l'√©nergie! J'ai trouv√© du contenu palpitant!",
        es: "¬°Me encanta la energ√≠a! ¬°He encontrado contenido emocionante!"
      },
      tired: {
        en: "I can tell you're tired. Here's some easy-to-watch, relaxing content!",
        tr: "Yorgun olduƒüunuzu anlayabiliyorum. ƒ∞zlemesi kolay, rahatlatƒ±cƒ± i√ßerikler buldum!",
        de: "Ich merke, dass Sie m√ºde sind. Hier ist leicht zu schauender, entspannender Inhalt!",
        fr: "Je vois que vous √™tes fatigu√©. Voici du contenu facile √† regarder et relaxant!",
        es: "Veo que est√°s cansado. ¬°Aqu√≠ hay contenido f√°cil de ver y relajante!"
      },
      relaxed: {
        en: "Perfect time to unwind! I've found calm, soothing content for you!",
        tr: "Rahatlamak i√ßin m√ºkemmel zaman! Sakin, h uzurlu i√ßerikler buldum!",
        de: "Perfekte Zeit zum Entspannen! Ich habe ruhige, beruhigende Inhalte gefunden!",
        fr: "Parfait pour se d√©tendre! J'ai trouv√© du contenu calme et apaisant!",
        es: "¬°Momento perfecto para relajarse! ¬°He encontrado contenido tranquilo!"
      },
      stressed: {
        en: "I sense you need a break. Here's stress-free content to help you relax!",
        tr: "Bir molaya ihtiyacƒ±nƒ±z olduƒüunu hissediyorum. Rahatlamanƒ±z i√ßin stressiz i√ßerikler buldum!",
        de: "Ich sp√ºre, dass Sie eine Pause brauchen. Hier ist stressfreier Inhalt!",
        fr: "Je sens que vous avez besoin d'une pause. Voici du contenu sans stress!",
        es: "Siento que necesitas un descanso. ¬°Aqu√≠ hay contenido sin estr√©s!"
      },
      romantic: {
        en: "Feeling romantic? I've found beautiful love stories for you!",
        tr: "Romantik hissediyor musun? Senin√ßin g√ºzel a≈ük hikayeleri buldum!",
        de: "Romantisch gestimmt? Ich habe sch√∂ne Liebesgeschichten gefunden!",
        fr: "Vous vous sentez romantique? J'ai trouv√© de belles histoires d'amour!",
        es: "¬øSintiendo rom√°ntico? ¬°He encontrado hermosas historias de amor!"
      },
      nostalgic: {
        en: "Missing the good old days? Here are some classic gems from the past!",
        tr: "Eski g√ºnleri √∂zledin mi? Ge√ßmi≈üten klasik i√ßerikler buldum!",
        de: "Vermissen Sie die gute alte Zeit? Hier sind klassische Perlen aus der Vergangenheit!",
        fr: "Vous manquez les bons vieux jours? Voici des classiques du pass√©!",
        es: "¬øExtra√±as los viejos tiempos? ¬°Aqu√≠ hay cl√°sicos del pasado!"
      },
      angry: {
        en: "I can sense your mood. Here's intense content to match your energy!",
        tr: "Ruh halini anlayabiliyorum. Enerjine uygun yoƒüun i√ßerikler buldum!",
        de: "Ich sp√ºre Ihre Stimmung. Hier ist intensiver Inhalt!",
        fr: "Je ressens votre humeur. Voici du contenu intense!",
        es: "Puedo sentir tu estado de √°nimo. ¬°Aqu√≠ hay contenido intenso!"
      }
    };

    const moodKey = params.detectedMood as string;
    if (moodDescriptions[moodKey]) {
      moodContext = `\n\nDetected Mood: ${params.detectedMood} (confidence: ${params.moodConfidence}%)\nMood Acknowledgment: "${moodDescriptions[moodKey][languageCode] || moodDescriptions[moodKey].en}"`;
    }
  }

  let queryTypeContext = "";
  if (params.isVagueQuery && !params.detectedMood) {
    queryTypeContext = `\n\nQuery Type: Vague with no specific preferences or mood\nApproach: Showing trending popular content as a conversation starter. Gently encourage them to share preferences.`;
  } else if (params.detectedMood) {
    queryTypeContext = `\n\nQuery Type: Mood-based recommendation\nApproach: Empathetically acknowledge their emotional state and explain how the content matches their mood.`;
  }

  // Build actual titles list for AI to reference
  const actualTitlesList = results.slice(0, 5).map(r => {
    const name = r.title || r.name || "Unknown";
    const year = r.release_date ? new Date(r.release_date).getFullYear() : (r.first_air_date ? new Date(r.first_air_date).getFullYear() : "?");
    const rating = r.vote_average ? r.vote_average.toFixed(1) : "N/A";
    return `- "${name}" (${year}, ${rating}/10)`;
  }).join("\n");

  const prompt = `You are a friendly, warm, emotionally intelligent streaming content assistant. Generate a natural, conversational response to the user's query.

User asked: "${query}"

${contextInfo}${moodContext}${queryTypeContext}

We found ${resultCount} ${contentType}.

${actualTitlesList ? `\nüé¨ ACTUAL RESULTS FROM DATABASE:\n${actualTitlesList}\n` : ""}

üö®üö®üö® ABSOLUTE RULES - VIOLATION = COMPLETE FAILURE üö®üö®üö®

YOU WILL BE FIRED IF YOU BREAK THESE RULES:

1. ‚ùå NEVER INVENT numbers, titles, or details - ONLY use what's in the list above
2. ‚ùå NEVER say "88 films" or any number you calculated yourself - ONLY say ${resultCount}
3. ‚ùå NEVER mention ANY title not in "ACTUAL RESULTS FROM DATABASE"
4. ‚ùå NEVER make up cast, directors, years, ratings, or any metadata
5. ‚ùå If you don't see it in the list above ‚Üí YOU DON'T KNOW IT ‚Üí DON'T SAY IT
6. ‚úÖ ONLY safe phrases: "We found ${resultCount} titles", "The results are showing below", "Take a look at the options"

Generate a response (1-2 sentences MAX) that:
1. If SPECIFIC TITLE (1 result): Use ONLY that title from the list, mention its year/rating from the list
2. If MOOD detected: Acknowledge mood + "Here are ${resultCount} suggestions"
3. If PERSON search: "I found ${resultCount} titles with [Person Name]"
4. For ALL other cases: "I found ${resultCount} great options for you!" + guide them to browse

üö® FORBIDDEN PHRASES üö®
- "88 films by..." ‚ùå
- Any specific number except ${resultCount} ‚ùå
- Any title not in the results list ‚ùå
- "including..." ‚ùå (Don't list titles!)
- Any cast/director names not provided ‚ùå

‚úÖ SAFE TEMPLATE:
"I found ${resultCount} [type] for you! [Optional: mood/context]. Take a look at the results below."

CRITICAL: If unsure ‚Üí Use the safe template. Better boring than wrong!

üåçüåçüåç LANGUAGE RULES - ABSOLUTE PRIORITY üåçüåçüåç

YOU MUST respond in the EXACT same language as the user's query:

Language Detection:
- User query language code: ${languageCode}
- If Turkish words detected (film, dizi, gibi, i√ßin, olan, var) ‚Üí Respond in TURKISH
- If English words detected (movie, show, like, with, where) ‚Üí Respond in ENGLISH
- If German words detected (Film, Serie, mit) ‚Üí Respond in GERMAN
- If French words detected (film, s√©rie, avec) ‚Üí Respond in FRENCH
- If Spanish words detected (pel√≠cula, serie, con) ‚Üí Respond in SPANISH

EXAMPLES:
- Query: "jim carrey'nin smokin giydiƒüi film" ‚Üí TURKISH: "Aradƒ±ƒüƒ±nƒ±z film: 'The Mask'!"
- Query: "jim carrey wearing a mask" ‚Üí ENGLISH: "Found it: 'The Mask'!"
- Query: "jim carrey mit Maske" ‚Üí GERMAN: "Gefunden: 'The Mask'!"

üö® CRITICAL: Match the user's language EXACTLY. Do NOT mix languages!

Keep it warm, conversational, and helpful. Respond with just the message text, no quotes or extra formatting.

Match the emotional tone if mood detected (upbeat for happy, gentle for sad, energetic for bored).`;

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 100,
        temperature: 0.1,
      }),
    });

    if (!response.ok) {
      return `I found ${resultCount} great ${contentType} for you! Let me know if you'd like to refine your search.`;
    }

    const data = await response.json();
    return (
      data.choices?.[0]?.message?.content?.trim() ||
      `I found ${resultCount} great ${contentType} for you! Let me know if you'd like to refine your search.`
    );
  } catch (error) {
    console.error("Error generating friendly response:", error);
    return `I found ${resultCount} great ${contentType} for you! Let me know if you'd like to refine your search.`;
  }
}

async function parseQueryWithGPT(
  query: string,
  conversationHistory: any[],
  apiKey: string
): Promise<any> {
  const currentYear = new Date().getFullYear();

  const systemPrompt = `You are an expert at understanding movie/TV show requests and converting them to TMDB API parameters.

üé≠üé≠üé≠ ABSOLUTE HIGHEST PRIORITY: MOOD DETECTION üé≠üé≠üé≠

BEFORE analyzing anything else, you MUST detect the user's emotional state or mood.

MOOD DETECTION RULES (PRIORITY #1):

1. EXPLICIT MOOD KEYWORDS - Check for these FIRST:

TURKISH:
- Sad/Down: "√ºzg√ºn√ºm", "√ºz√ºl√ºyorum", "k√∂t√º hissediyorum", "moralsizim", "depresyondayƒ±m", "kƒ±rƒ±kƒ±m"
- Happy/Joyful: "mutluyum", "ne≈üeliyim", "keyifliyim", "harikayƒ±m", "muhte≈üem hissediyorum"
- Bored: "sƒ±kƒ±lƒ±yorum", "canƒ±m sƒ±kƒ±lƒ±yor", "sƒ±kƒ±ldƒ±m", "bƒ±ktƒ±m", "can sƒ±kƒ±ntƒ±sƒ±"
- Excited: "heyecanlƒ±yƒ±m", "co≈ükuluyum", "heyecan arƒ±yorum", "adrenalin istiyorum"
- Tired/Exhausted: "yorgunum", "bitkinim", "t√ºkenmi≈ü hissediyorum", "enerjim yok"
- Relaxed/Calm: "rahatlamak istiyorum", "sakinle≈ümek istiyorum", "huzur arƒ±yorum", "dinlenmek istiyorum"
- Stressed/Anxious: "stresli", "gerginim", "kafam karƒ±≈üƒ±k", "endi≈üeliyim", "bunalmƒ±≈ü hissediyorum"
- Romantic: "romantik hissediyorum", "a≈üƒ±k gibiyim", "sevgi dolu"
- Nostalgic: "nostaljik", "eski g√ºnleri √∂zledim", "ge√ßmi≈üi hatƒ±rlamak istiyorum"
- Angry: "sinirliyim", "√∂fkeliyim", "kƒ±zmƒ±≈ü durumdayƒ±m"

ENGLISH:
- Sad/Down: "sad", "depressed", "feeling down", "blue", "heartbroken", "miserable", "upset"
- Happy/Joyful: "happy", "joyful", "cheerful", "great", "wonderful", "fantastic", "amazing"
- Bored: "bored", "boring day", "nothing to do", "fed up"
- Excited: "excited", "pumped", "hyped", "thrilled", "energetic"
- Tired/Exhausted: "tired", "exhausted", "drained", "worn out", "no energy"
- Relaxed/Calm: "want to relax", "need to unwind", "chill", "peaceful", "calm down"
- Stressed/Anxious: "stressed", "anxious", "overwhelmed", "tense", "worried"
- Romantic: "romantic mood", "in love", "feeling romantic"
- Nostalgic: "nostalgic", "miss the old days", "reminiscing"
- Angry: "angry", "mad", "furious", "pissed off"

GERMAN:
- Sad/Down: "traurig", "niedergeschlagen", "deprimiert", "schlecht gelaunt"
- Happy/Joyful: "gl√ºcklich", "fr√∂hlich", "gut gelaunt", "fantastisch"
- Bored: "gelangweilt", "Langeweile", "nichts zu tun"
- Excited: "aufgeregt", "begeistert", "voller Energie"
- Tired: "m√ºde", "ersch√∂pft", "kaputt"
- Relaxed: "entspannen", "relaxen", "ruhig"
- Stressed: "gestresst", "angespannt", "√ºberfordert"

FRENCH:
- Sad/Down: "triste", "d√©prim√©", "mal", "cafardeux"
- Happy/Joyful: "heureux", "joyeux", "content", "ravi"
- Bored: "ennuy√©", "s'ennuie", "marre"
- Excited: "excit√©", "enthousiaste", "√©nergique"
- Tired: "fatigu√©", "√©puis√©", "crev√©"
- Relaxed: "se d√©tendre", "relaxer", "calme"
- Stressed: "stress√©", "anxieux", "tendu"

SPANISH:
- Sad/Down: "triste", "deprimido", "mal", "desanimado"
- Happy/Joyful: "feliz", "alegre", "contento", "genial"
- Bored: "aburrido", "harto", "sin nada que hacer"
- Excited: "emocionado", "entusiasmado", "con energ√≠a"
- Tired: "cansado", "agotado", "exhausto"
- Relaxed: "relajarse", "tranquilo", "descansar"
- Stressed: "estresado", "ansioso", "agobiado"

2. IMPLICIT MOOD INDICATORS - Analyze writing style:
- Multiple exclamation marks (!!!) ‚Üí Excited/Energetic
- Ellipsis (...) ‚Üí Contemplative/Sad/Tired
- ALL CAPS ‚Üí Very excited or angry
- Very short responses (1-3 words) ‚Üí Tired/Bored/Low energy
- Emojis: üò¢üòîüòû ‚Üí Sad, üòäüòÑüòÅ ‚Üí Happy, üò¥üò© ‚Üí Tired, ü§îüí≠ ‚Üí Contemplative

3. CONTEXTUAL MOOD PHRASES:
- "aƒüƒ±r bir ≈üey", "heavy content" ‚Üí Contemplative/Serious mood
- "hafif bir ≈üey", "light content" ‚Üí Tired/Want easy viewing
- "eƒülenceli", "fun", "lustig" ‚Üí Happy/Playful mood
- "derin", "deep", "profound" ‚Üí Contemplative/Philosophical
- "hƒ±zlƒ±", "fast-paced", "schnell" ‚Üí Excited/Energetic

4. MOOD-TO-CONTENT MAPPING (Apply when mood detected):

SAD/DOWN ‚Üí Comedy (35) + high ratings (7.0+) OR uplifting Drama (18)
  - Goal: Cheer up the user
  - Keywords: "heartwarming", "uplifting", "feel-good"
  - Avoid: Dark dramas, tragedies, depressing content

HAPPY/JOYFUL ‚Üí Feel-good content, Comedy (35), Romance (10749), Adventure (12)
  - Goal: Maintain positive mood
  - Light, fun, entertaining content

BORED ‚Üí Action (28), Thriller (53), Mystery (9648)
  - Goal: High energy, engaging, fast-paced
  - minRating: 6.5+ (quality matters when bored)
  - Avoid: Slow-paced, documentaries

EXCITED ‚Üí Action (28), Adventure (12), Sci-Fi (878)
  - Goal: Match high energy
  - Big blockbusters, thrilling content

TIRED/EXHAUSTED ‚Üí Light Comedy (35), Animation (16), Documentary (99)
  - Goal: Easy to watch, not demanding
  - Avoid: Complex plots, heavy dramas
  - Prefer: Shorter runtime (under 100min for movies)

RELAXED/CALM ‚Üí Documentary (99), Drama (18), Romance (10749)
  - Goal: Peaceful, soothing content
  - Nature documentaries, calm dramas
  - Avoid: Action, horror, thriller

STRESSED/ANXIOUS ‚Üí Light Comedy (35), Feel-good content
  - Goal: Stress relief, distraction
  - Avoid: Thriller, Horror, intense Drama

ROMANTIC ‚Üí Romance (10749), Drama (18)
  - Goal: Love stories, emotional connection

NOSTALGIC ‚Üí Older content (yearStart: 1980-2000)
  - Classic movies/shows from past decades

ANGRY ‚Üí Action (28), Thriller (53) OR Comedy (35) for release
  - Intense action for catharsis OR comedy to lighten mood

5. CRITICAL DECISION FLOW:
   Step 1: Check for ANY mood indicators (explicit or implicit)
   Step 2: If mood detected ‚Üí Set detectedMood, moodConfidence (0-100), apply mood-based genres
   Step 3: If NO mood AND NO specific preferences ‚Üí Set isVagueQuery: true, useTrendingAPI: true
   Step 4: If mood + specific preferences ‚Üí Combine both (mood-based genres + user preferences)

‚ö†Ô∏è CRITICAL: If ANY mood is detected, NEVER set useTrendingAPI: true (unless explicitly requested)

CONVERSATION CONTEXT:
- You will receive conversation history - ALWAYS consider previous messages for context
- Track mood across conversation - mood can change between messages

STREAMING PROVIDERS (use provider IDs):
- Netflix: 8
- Amazon Prime: 9
- Disney+: 337
- HBO Max/Max: 1899
- Hulu: 15
- Apple TV+: 350
- Paramount+: 531

PROVIDER NAME VARIATIONS:
- "Apple TV", "Apple content", "Apple" ‚Üí Apple TV+ (350)
- "Max", "HBO Max", "HBO" ‚Üí Max (1899)
- "Prime", "Amazon Prime Video", "Amazon" ‚Üí Amazon Prime (9)
- "Disney Plus", "Disney", "Disney+" ‚Üí Disney+ (337)

GENRES: Action: 28, Adventure: 12, Animation: 16, Comedy: 35, Crime: 80, Documentary: 99, Drama: 18, Family: 10751, Fantasy: 14, Horror: 27, Mystery: 9648, Romance: 10749, Sci-Fi: 878, Thriller: 53, War: 10752, Western: 37

‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è RATING RULES - READ CAREFULLY ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è

DEFAULT BEHAVIOR (MOST IMPORTANT):
- If user does NOT explicitly mention quality ‚Üí minRating: 0 (NO FILTER!)
- "√∂neri", "recommendation", "suggest", "film bul", "dizi √∂ner" ‚Üí minRating: 0
- "Netflix'te film", "aksiyon filmi", "komedi" ‚Üí minRating: 0
- "g√ºzel", "nice", "good", "ho≈ü", "keyifli" ‚Üí minRating: 0 (these are too vague!)

ONLY ADD minRating IF USER IS EXPLICIT:
- "en iyi", "top rated", "highest rated", "√ßok iyi puanlƒ±" ‚Üí minRating: 7.5
- "y√ºksek puanlƒ±", "high rated", "iyi puanlƒ±" ‚Üí minRating: 7.0
- "kaliteli", "quality", "well-rated" ‚Üí minRating: 6.5
- "m√ºkemmel", "excellent", "masterpiece" ‚Üí minRating: 8.0

RULE OF THUMB: When in doubt, use minRating: 0

‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è CONTENT TYPE DETECTION - CRITICAL ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è

TURKISH (VERY IMPORTANT):
- "dizi film" ‚Üí contentType: "tv" (NOT both! This means TV series ONLY)
- "dizi" alone ‚Üí contentType: "tv"
- "diziler" ‚Üí contentType: "tv"
- "film" alone ‚Üí contentType: "movie"
- "filmler" ‚Üí contentType: "movie"
- "dizi ve film" or "dizi, film" ‚Üí contentType: "both"
- "film dizi" ‚Üí contentType: "both"

ENGLISH:
- "TV series" or "series" or "show" ‚Üí contentType: "tv"
- "movie" or "film" ‚Üí contentType: "movie"
- "series and movie" or "show and movie" ‚Üí contentType: "both"

FRENCH:
- "s√©rie t√©l√©vis√©e" or "s√©rie" ‚Üí contentType: "tv"
- "film" or "cin√©ma" ‚Üí contentType: "movie"
- "s√©rie et film" ‚Üí contentType: "both"

GERMAN:
- "Fernsehserie" or "Serie" ‚Üí contentType: "tv"
- "Film" or "Kino" ‚Üí contentType: "movie"
- "Serie und Film" ‚Üí contentType: "both"

SPANISH:
- "serie de televisi√≥n" or "serie" ‚Üí contentType: "tv"
- "pel√≠cula" or "film" ‚Üí contentType: "movie"
- "serie y pel√≠cula" ‚Üí contentType: "both"

CRITICAL RULE: "dizi film" in Turkish means TV SERIES ONLY, NOT both!

PERSON QUERY (HIGHEST PRIORITY):
When user asks ABOUT a person (not searching for their content):
- Keywords: "kim", "kimdir", "who is", "ka√ß ya≈üƒ±nda", "how old", "doƒüum tarihi", "birthday", "nereli", "where from", "hakkƒ±nda bilgi"
- Set: isPersonQuery: false (we want content search!), personName: "person name"
- Examples:
  * "≈ûener ≈ûen'in oynadƒ±ƒüƒ± dizi film var mƒ±?" ‚Üí isPersonQuery: false, personName: "≈ûener ≈ûen", contentType: "tv"
  * "Tom Hanks filmleri" ‚Üí isPersonQuery: false, personName: "Tom Hanks", contentType: "movie"
  * "Brad Pitt'in dizileri" ‚Üí isPersonQuery: false, personName: "Brad Pitt", contentType: "tv"

WHEN TO USE isPersonQuery: true:
- ONLY when asking for biographical information, NOT content search
- Examples: "Tom Hanks ka√ß ya≈üƒ±nda?", "Brad Pitt kimdir?", "≈ûener ≈ûen nereli?"

CONTENT INFO QUERY (HIGH PRIORITY):
When user asks ABOUT specific content (not searching):
- Keywords: "hakkƒ±nda", "about", "ne zaman √ßƒ±ktƒ±", "when released", "konusu", "plot", "y√∂netmen kim", "director", "oyuncular", "cast"
- Set: isContentInfoQuery: true, specificTitle: "title"
- Examples:
  * "Inception ne zaman √ßƒ±ktƒ±?" ‚Üí isContentInfoQuery: true, specificTitle: "Inception"
  * "Breaking Bad konusu" ‚Üí isContentInfoQuery: true, specificTitle: "Breaking Bad"

TRENDING CONTENT:
Keywords: "trend", "trending", "popular", "pop√ºler", "√∂ne √ßƒ±kan", "g√ºndem", "hot", "viral"
‚Üí Set: useTrendingAPI: true, sortBy: "popularity.desc", minRating: 0

SPECIFIC TITLE SEARCH (where to watch):
Keywords: "var mƒ±", "is there", "where can I watch", "hangi platformda", "nerede izlenir"
‚Üí Set: specificTitle: "title name", providers: [relevant IDs]

PRODUCTION COUNTRY:
- "t√ºrk filmi", "t√ºrk dizisi" ‚Üí productionCountries: ["TR"], NO spokenLanguages
- "amerikan", "hollywood" ‚Üí productionCountries: ["US"]
- "fransƒ±z", "french" ‚Üí productionCountries: ["FR"]
- "japon", "anime" ‚Üí productionCountries: ["JP"]
- "kore", "korean" ‚Üí productionCountries: ["KR"]

‚ö†Ô∏è CRITICAL RULES FOR MAXIMUM RESULTS ‚ö†Ô∏è

1. NEVER set spokenLanguages if productionCountries is set (redundant!)
2. NEVER add minRating unless user explicitly demands quality
3. Use SINGLE genre when possible (multiple genres = fewer results)
4. ALWAYS prefer popularity.desc over vote_average.desc
5. Limit total filters to MAX 3 (contentType + genre + provider, for example)
6. When user says simple things like "film √∂ner", "dizi bul" ‚Üí ONLY set contentType, nothing else!

‚ö†Ô∏è CONTENT SEARCH WITH PERSON NAME - EXAMPLES ‚ö†Ô∏è

Turkish Examples:
- "≈ûener ≈ûen'in oynadƒ±ƒüƒ± dizi film" ‚Üí personName: "≈ûener ≈ûen", contentType: "tv", isPersonQuery: false
- "Haluk Bilginer dizileri" ‚Üí personName: "Haluk Bilginer", contentType: "tv", isPersonQuery: false
- "Kemal Sunal filmleri" ‚Üí personName: "Kemal Sunal", contentType: "movie", isPersonQuery: false
- "Halit Ergen√ß dizi film" ‚Üí personName: "Halit Ergen√ß", contentType: "tv", isPersonQuery: false

English Examples:
- "Tom Hanks movies" ‚Üí personName: "Tom Hanks", contentType: "movie", isPersonQuery: false
- "Brad Pitt TV series" ‚Üí personName: "Brad Pitt", contentType: "tv", isPersonQuery: false
- "shows with Jennifer Aniston" ‚Üí personName: "Jennifer Aniston", contentType: "tv", isPersonQuery: false

French Examples:
- "films avec Jean Reno" ‚Üí personName: "Jean Reno", contentType: "movie", isPersonQuery: false
- "s√©ries avec Marion Cotillard" ‚Üí personName: "Marion Cotillard", contentType: "tv", isPersonQuery: false

German Examples:
- "Filme mit Til Schweiger" ‚Üí personName: "Til Schweiger", contentType: "movie", isPersonQuery: false
- "Serien mit Matthias Schweigh√∂fer" ‚Üí personName: "Matthias Schweigh√∂fer", contentType: "tv", isPersonQuery: false

PRIORITY ORDER:
1. DETECT MOOD FIRST (explicit keywords, writing style, context)
2. Is this a PERSON info query? ‚Üí isPersonQuery
3. Is this a CONTENT info query? ‚Üí isContentInfoQuery
4. Is this EXPLICIT TRENDING request? ‚Üí useTrendingAPI
5. Is this SPECIFIC TITLE search? ‚Üí specificTitle
6. Is this completely VAGUE with NO mood and NO context? ‚Üí isVagueQuery: true, useTrendingAPI: true
7. Otherwise ‚Üí Extract filters, apply mood if detected, KEEP IT SIMPLE!

Respond ONLY with JSON:
{
  "isOffTopic": boolean,
  "detectedMood": "sad" | "happy" | "bored" | "excited" | "tired" | "relaxed" | "stressed" | "romantic" | "nostalgic" | "angry" | null,
  "moodConfidence": number (0-100) or null,
  "isVagueQuery": boolean,
  "isPersonQuery": boolean,
  "isContentInfoQuery": boolean,
  "contentType": "movie" | "tv" | "both",
  "genres": [genre_ids],
  "providers": [provider_ids],
  "minRating": number or 0,
  "maxRating": number or null,
  "yearStart": number or null,
  "yearEnd": number or null,
  "sortBy": "popularity.desc" | "vote_average.desc" | "release_date.desc",
  "personName": string or null,
  "personRole": "director" | "actor" | "any" | null,
  "directorName": string or null,
  "actorNames": [string array] or [],
  "keywords": [string array] or [],
  "locationKeywords": [string array] or [],
  "productionCountries": [country codes] or [],
  "spokenLanguages": [language codes] or [],
  "specificTitle": string or null,
  "maxResults": number or null,
  "maxSeasons": number or null,
  "minSeasons": number or null,
  "minRuntime": number or null,
  "maxRuntime": number or null,
  "certification": string or null,
  "withNetworks": [network_ids] or [],
  "adultContent": boolean,
  "useTrendingAPI": boolean
}`;

  try {
    const messages: any[] = [
      {
        role: "system",
        content: systemPrompt,
      },
    ];

    if (conversationHistory && conversationHistory.length > 0) {
      messages.push(...conversationHistory.slice(-6));
    }

    messages.push({
      role: "user",
      content: query,
    });

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-4o",
        messages,
        response_format: { type: "json_object" },
        max_tokens: 500,
        temperature: 0.2,
      }),
    });

    if (!response.ok) {
      throw new Error("Failed to parse query");
    }

    const data = await response.json();
    const content = data.choices?.[0]?.message?.content;

    if (!content) {
      throw new Error("Empty response from GPT");
    }

    return JSON.parse(content);
  } catch (error) {
    console.error("GPT Error:", error);
    throw error;
  }
}

async function getPersonInfo(
  name: string,
  tmdbKey: string,
  language: string = "en-US"
): Promise<PersonInfo | null> {
  try {
    console.log("üîç Searching for person:", name);
    const personId = await findPersonId(name, tmdbKey);
    if (!personId) {
      console.log("‚ùå Person not found:", name);
      return null;
    }

    const url = `https://api.themoviedb.org/3/person/${personId}?api_key=${tmdbKey}&language=${language}`;
    const response = await fetch(url);
    const data = await response.json();

    console.log("‚úÖ Person info retrieved:", data.name);

    return {
      id: data.id,
      name: data.name,
      biography: data.biography,
      birthday: data.birthday,
      place_of_birth: data.place_of_birth,
      known_for_department: data.known_for_department,
      profile_path: data.profile_path,
    };
  } catch (error) {
    console.error("Error fetching person info:", error);
    return null;
  }
}

async function getContentInfo(
  title: string,
  contentType: string,
  tmdbKey: string,
  language: string = "en-US"
): Promise<ContentInfo | null> {
  try {
    const searchTypes = contentType === "both" ? ["movie", "tv"] : [contentType];

    for (const type of searchTypes) {
      const url = `https://api.themoviedb.org/3/search/${type}?api_key=${tmdbKey}&query=${encodeURIComponent(
        title
      )}&language=${language}`;
      const response = await fetch(url);
      const data = await response.json();

      if (data.results && data.results.length > 0) {
        const item = data.results[0];
        const detailUrl = `https://api.themoviedb.org/3/${type}/${item.id}?api_key=${tmdbKey}&language=${language}&append_to_response=credits`;
        const detailResponse = await fetch(detailUrl);
        const details = await detailResponse.json();

        const director = details.credits?.crew?.find(
          (person: any) => person.job === "Director"
        )?.name;

        const cast = details.credits?.cast
          ?.slice(0, 5)
          .map((person: any) => person.name) || [];

        const genres = details.genres?.map((g: any) => g.name) || [];

        console.log("‚úÖ Content info retrieved:", details.title || details.name);

        return {
          id: details.id,
          title: type === "movie" ? details.title : undefined,
          name: type === "tv" ? details.name : undefined,
          content_type: type === "movie" ? "movie" : "tv_show",
          overview: details.overview,
          poster_path: details.poster_path,
          backdrop_path: details.backdrop_path,
          vote_average: details.vote_average,
          release_date: details.release_date,
          first_air_date: details.first_air_date,
          runtime: details.runtime,
          number_of_seasons: details.number_of_seasons,
          director,
          cast,
          genres,
        };
      }
    }

    return null;
  } catch (error) {
    console.error("Error fetching content info:", error);
    return null;
  }
}

async function getRelatedContent(
  contentId: number,
  contentType: string,
  tmdbKey: string,
  language: string = "en-US"
): Promise<ContentResult[]> {
  try {
    const type = contentType === "movie" ? "movie" : "tv";
    const url = `https://api.themoviedb.org/3/${type}/${contentId}/similar?api_key=${tmdbKey}&language=${language}&page=1`;
    const response = await fetch(url);
    const data = await response.json();

    const results: ContentResult[] = [];
    if (data.results && data.results.length > 0) {
      for (const item of data.results.slice(0, 10)) {
        results.push({
          id: item.id,
          title: type === "movie" ? item.title : undefined,
          name: type === "tv" ? item.name : undefined,
          content_type: type === "movie" ? "movie" : "tv_show",
          overview: item.overview,
          poster_path: item.poster_path,
          backdrop_path: item.backdrop_path,
          vote_average: item.vote_average,
          release_date: item.release_date,
          first_air_date: item.first_air_date,
          popularity: item.popularity,
        });
      }
    }

    return results;
  } catch (error) {
    console.error("Error fetching related content:", error);
    return [];
  }
}

async function getContentProviders(
  contentId: number,
  contentType: string,
  tmdbKey: string,
  countryCode: string
): Promise<number[]> {
  try {
    const type = contentType === "movie" ? "movie" : "tv";
    const url = `https://api.themoviedb.org/3/${type}/${contentId}/watch/providers?api_key=${tmdbKey}`;
    const response = await fetch(url);
    const data = await response.json();

    const countryData = data.results?.[countryCode];
    if (!countryData) {
      console.log(`‚ö†Ô∏è No providers found for ${contentId} in ${countryCode}`);
      return [];
    }

    const providerIds: number[] = [];
    if (countryData.flatrate) {
      providerIds.push(...countryData.flatrate.map((p: any) => p.provider_id));
    }
    if (countryData.buy) {
      providerIds.push(...countryData.buy.map((p: any) => p.provider_id));
    }
    if (countryData.rent) {
      providerIds.push(...countryData.rent.map((p: any) => p.provider_id));
    }

    return [...new Set(providerIds)];
  } catch (error) {
    console.error("Error fetching providers:", error);
    return [];
  }
}

async function searchByTitle(
  title: string,
  contentType: string,
  tmdbKey: string,
  language: string = "en-US"
): Promise<ContentResult[]> {
  try {
    const results: ContentResult[] = [];
    const searchTypes = contentType === "both" ? ["movie", "tv"] : [contentType];

    for (const type of searchTypes) {
      const url = `https://api.themoviedb.org/3/search/${type}?api_key=${tmdbKey}&query=${encodeURIComponent(
        title
      )}&language=${language}`;
      const response = await fetch(url);
      const data = await response.json();

      if (data.results && data.results.length > 0) {
        const item = data.results[0];
        results.push({
          id: item.id,
          title: type === "movie" ? item.title : undefined,
          name: type === "tv" ? item.name : undefined,
          content_type: type === "movie" ? "movie" : "tv_show",
          overview: item.overview,
          poster_path: item.poster_path,
          backdrop_path: item.backdrop_path,
          vote_average: item.vote_average,
          release_date: item.release_date,
          first_air_date: item.first_air_date,
          popularity: item.popularity,
        });
        break;
      }
    }

    return results;
  } catch (error) {
    console.error("Title search error:", error);
    return [];
  }
}

async function findPersonId(name: string, tmdbKey: string): Promise<number | null> {
  try {
    const url = `https://api.themoviedb.org/3/search/person?api_key=${tmdbKey}&query=${encodeURIComponent(
      name
    )}`;
    const response = await fetch(url);
    const data = await response.json();

    if (data.results && data.results.length > 0) {
      console.log(`‚úÖ Found person: ${name} (ID: ${data.results[0].id})`);
      return data.results[0].id;
    }

    return null;
  } catch (error) {
    console.error("Person search error:", error);
    return null;
  }
}

async function findKeywordIds(keywords: string[], tmdbKey: string): Promise<number[]> {
  const keywordIds: number[] = [];
  for (const keyword of keywords) {
    try {
      const url = `https://api.themoviedb.org/3/search/keyword?api_key=${tmdbKey}&query=${encodeURIComponent(
        keyword
      )}`;
      const response = await fetch(url);
      const data = await response.json();

      if (data.results && data.results.length > 0) {
        keywordIds.push(data.results[0].id);
        console.log(`‚úÖ Found keyword: "${keyword}" (ID: ${data.results[0].id})`);
      }
    } catch (error) {
      console.error(`Error searching keyword "${keyword}":`, error);
    }
  }
  return keywordIds;
}

async function searchByPerson(
  personName: string,
  contentType: string,
  tmdbKey: string,
  personRole?: string,
  language: string = "en-US"
): Promise<ContentResult[]> {
  try {
    const personId = await findPersonId(personName, tmdbKey);
    if (!personId) {
      console.log(`‚ùå Person not found: ${personName}`);
      return [];
    }

    const results: ContentResult[] = [];
    const searchTypes = contentType === "both" ? ["movie", "tv"] : [contentType];

    for (const type of searchTypes) {
      const creditsType = type === "movie" ? "movie_credits" : "tv_credits";
      const url = `https://api.themoviedb.org/3/person/${personId}/${creditsType}?api_key=${tmdbKey}&language=${language}`;

      console.log(`üîç Fetching ${type} credits for person ID: ${personId}`);
      const response = await fetch(url);
      const data = await response.json();

      let items: any[] = [];
      if (personRole === "director" && type === "movie") {
        items = data.crew?.filter((item: any) => item.job === "Director") || [];
      } else if (personRole === "actor") {
        items = data.cast || [];
      } else {
        items = [...(data.cast || []), ...(data.crew || [])];
      }

      const uniqueItems = Array.from(
        new Map(items.map((item) => [item.id, item])).values()
      ).sort((a: any, b: any) => (b.popularity || 0) - (a.popularity || 0));

      console.log(`‚úÖ Found ${uniqueItems.length} ${type} credits`);

      for (const item of uniqueItems) {
        results.push({
          id: item.id,
          title: type === "movie" ? item.title : undefined,
          name: type === "tv" ? item.name : undefined,
          content_type: type === "movie" ? "movie" : "tv_show",
          overview: item.overview,
          poster_path: item.poster_path,
          backdrop_path: item.backdrop_path,
          vote_average: item.vote_average,
          release_date: item.release_date,
          first_air_date: item.first_air_date,
          popularity: item.popularity,
        });
      }
    }

    return results;
  } catch (error) {
    console.error("Person search error:", error);
    return [];
  }
}

async function getTrendingContent(
  contentType: string,
  tmdbKey: string,
  countryCode: string,
  language: string = "en-US"
): Promise<ContentResult[]> {
  try {
    console.log("üî• Fetching TRENDING content from TMDB API");
    const results: ContentResult[] = [];

    const timeWindow = "week";
    const mediaTypes = contentType === "both" ? ["movie", "tv"] : [contentType === "movie" ? "movie" : "tv"];

    for (const mediaType of mediaTypes) {
      const url = `https://api.themoviedb.org/3/trending/${mediaType}/${timeWindow}?api_key=${tmdbKey}&language=${language}`;
      console.log(`üîç Trending URL: ${url}`);

      const response = await fetch(url);
      const data = await response.json();

      console.log(`üì¶ Found ${data.results?.length || 0} trending ${mediaType} results`);

      if (data.results && data.results.length > 0) {
        for (const item of data.results) {
          results.push({
            id: item.id,
            title: mediaType === "movie" ? item.title : undefined,
            name: mediaType === "tv" ? item.name : undefined,
            content_type: mediaType === "movie" ? "movie" : "tv_show",
            overview: item.overview,
            poster_path: item.poster_path,
            backdrop_path: item.backdrop_path,
            vote_average: item.vote_average,
            release_date: item.release_date,
            first_air_date: item.first_air_date,
            popularity: item.popularity,
          });
        }
      }
    }

    console.log(`‚úÖ Total trending results: ${results.length}`);
    return results.sort((a, b) => (b.popularity || 0) - (a.popularity || 0));
  } catch (error) {
    console.error("Error fetching trending content:", error);
    return [];
  }
}

function validateAndRelaxParams(params: any): any {
  const relaxedParams = { ...params };

  const filterCount = [
    params.genres && params.genres.length > 0,
    params.providers && params.providers.length > 0,
    params.minRating && params.minRating > 0,
    params.productionCountries && params.productionCountries.length > 0,
    params.spokenLanguages && params.spokenLanguages.length > 0,
    params.yearStart !== null || params.yearEnd !== null,
    params.keywords && params.keywords.length > 0,
  ].filter(Boolean).length;

  console.log(`üìä Filter count: ${filterCount}`);

  if (filterCount > 3) {
    console.log("‚ö†Ô∏è Too many filters detected, relaxing parameters...");

    if (relaxedParams.productionCountries && relaxedParams.productionCountries.length > 0) {
      console.log("üìâ Removing spokenLanguages (redundant with productionCountries)");
      relaxedParams.spokenLanguages = [];
    }

    if (relaxedParams.minRating && relaxedParams.minRating < 7.0) {
      console.log(`üìâ Removing minRating ${relaxedParams.minRating} (keeping search broad)`);
      relaxedParams.minRating = 0;
    }

    if (relaxedParams.genres && relaxedParams.genres.length > 2) {
      console.log(`üìâ Reducing genres from ${relaxedParams.genres.length} to 2`);
      relaxedParams.genres = relaxedParams.genres.slice(0, 2);
    }

    if (relaxedParams.keywords && relaxedParams.keywords.length > 0) {
      console.log("üìâ Removing keywords");
      relaxedParams.keywords = [];
      relaxedParams.locationKeywords = [];
    }
  }

  if (relaxedParams.productionCountries && relaxedParams.productionCountries.length > 0 &&
      relaxedParams.spokenLanguages && relaxedParams.spokenLanguages.length > 0) {
    console.log("üîß Auto-removing spokenLanguages (productionCountries is sufficient)");
    relaxedParams.spokenLanguages = [];
  }

  return relaxedParams;
}

async function searchTMDB(
  params: any,
  tmdbKey: string,
  countryCode: string,
  language: string = "en-US"
): Promise<ContentResult[]> {
  params = validateAndRelaxParams(params);

  let results: ContentResult[] = [];

  if (params.useTrendingAPI) {
    console.log("üî• Using TRENDING API");
    const trendingResults = await getTrendingContent(params.contentType, tmdbKey, countryCode, language);

    let filteredResults = trendingResults;

    if (params.providers && params.providers.length > 0) {
      console.log("üîç Filtering trending by providers:", params.providers);
      const filtered: ContentResult[] = [];
      for (const item of trendingResults) {
        const providers = await getContentProviders(item.id, item.content_type, tmdbKey, countryCode);
        const hasProvider = params.providers.some((providerId: number) =>
          providers.includes(providerId)
        );
        if (hasProvider) {
          filtered.push(item);
        }
      }
      filteredResults = filtered;
    }

    if (params.genres && params.genres.length > 0) {
      console.log("üîç Note: Genre filtering on trending not fully supported");
    }

    return filteredResults.slice(0, params.maxResults || 50);
  }

  if (params.specificTitle) {
    const titleResults = await searchByTitle(
      params.specificTitle,
      params.contentType,
      tmdbKey,
      language
    );

    if (params.providers && params.providers.length > 0 && titleResults.length > 0) {
      const filteredResults: ContentResult[] = [];
      for (const item of titleResults) {
        const providers = await getContentProviders(
          item.id,
          item.content_type,
          tmdbKey,
          countryCode
        );
        const hasProvider = params.providers.some((providerId: number) =>
          providers.includes(providerId)
        );
        if (hasProvider) {
          filteredResults.push(item);
        } else {
          console.log(
            `‚ö†Ô∏è ${item.title || item.name} not available on requested provider(s)`
          );
        }
      }
      return filteredResults;
    }

    return titleResults;
  }

  if (params.isPersonQuery && params.personName) {
    return await searchByPerson(
      params.personName,
      params.contentType || "both",
      tmdbKey,
      params.personRole,
      language
    );
  }

  if (
    params.personName &&
    !params.directorName &&
    (!params.actorNames || params.actorNames.length === 0)
  ) {
    return await searchByPerson(
      params.personName,
      params.contentType,
      tmdbKey,
      params.personRole,
      language
    );
  }

  const contentTypes = params.contentType === "both" ? ["movie", "tv"] : [params.contentType];

  let keywordIds: number[] = [];
  if (params.keywords && params.keywords.length > 0) {
    keywordIds = await findKeywordIds(params.keywords, tmdbKey);
  }

  if (params.locationKeywords && params.locationKeywords.length > 0) {
    const locationIds = await findKeywordIds(params.locationKeywords, tmdbKey);
    keywordIds = [...keywordIds, ...locationIds];
  }

  let directorId: number | null = null;
  let actorIds: number[] = [];

  if (params.directorName) {
    directorId = await findPersonId(params.directorName, tmdbKey);
    if (directorId) {
      console.log(`üé¨ Director ID found: ${params.directorName} (${directorId})`);
    }
  }

  if (params.actorNames && params.actorNames.length > 0) {
    for (const actorName of params.actorNames) {
      const actorId = await findPersonId(actorName, tmdbKey);
      if (actorId) {
        actorIds.push(actorId);
        console.log(`üé≠ Actor ID found: ${actorName} (${actorId})`);
      }
    }
  }

  for (const type of contentTypes) {
    try {
      const baseUrl = `https://api.themoviedb.org/3/discover/${type}`;
      const urlParams = new URLSearchParams({
        api_key: tmdbKey,
        language: language,
        sort_by: params.sortBy || "popularity.desc",
        page: "1",
      });

      if (params.minRating && params.minRating >= 8) {
        urlParams.append("vote_count.gte", "20");
      } else if (params.minRating && params.minRating >= 7) {
        urlParams.append("vote_count.gte", "10");
      } else if (params.minRating && params.minRating >= 6) {
        urlParams.append("vote_count.gte", "5");
      } else {
        urlParams.append("vote_count.gte", "3");
      }

      if (params.genres && params.genres.length > 0) {
        urlParams.append("with_genres", params.genres.join(","));
      }

      if (params.providers && params.providers.length > 0) {
        urlParams.append("with_watch_providers", params.providers.join("|"));
        urlParams.append("watch_region", countryCode);
      }

      if (params.minRating && params.minRating > 0) {
        urlParams.append("vote_average.gte", params.minRating.toString());
      }

      if (params.maxRating && params.maxRating < 10) {
        urlParams.append("vote_average.lte", params.maxRating.toString());
      }

      if (params.yearStart !== null || params.yearEnd !== null) {
        const now = new Date();
        const currentYear = now.getFullYear();

        if (params.yearStart !== null) {
          if (type === "movie") {
            urlParams.append("primary_release_date.gte", `${params.yearStart}-01-01`);
          } else {
            urlParams.append("first_air_date.gte", `${params.yearStart}-01-01`);
          }
        }

        if (params.yearEnd !== null) {
          const endDate =
            params.yearEnd >= currentYear
              ? now.toISOString().split("T")[0]
              : `${params.yearEnd}-12-31`;
          if (type === "movie") {
            urlParams.append("primary_release_date.lte", endDate);
          } else {
            urlParams.append("first_air_date.lte", endDate);
          }
        }
      }

      if (keywordIds.length > 0) {
        urlParams.append("with_keywords", keywordIds.join(","));
      }

      if (params.productionCountries && params.productionCountries.length > 0) {
        urlParams.append("with_origin_country", params.productionCountries.join("|"));
      }

      if (params.spokenLanguages && params.spokenLanguages.length > 0) {
        urlParams.append("with_original_language", params.spokenLanguages.join("|"));
      }

      if (type === "movie" && directorId) {
        urlParams.append("with_crew", directorId.toString());
      }

      if (actorIds.length > 0) {
        urlParams.append("with_cast", actorIds.join(","));
      }

      if (type === "tv") {
        if (params.maxSeasons && params.maxSeasons > 0) {
          urlParams.append("with_number_of_seasons.lte", params.maxSeasons.toString());
        }
        if (params.minSeasons && params.minSeasons > 0) {
          urlParams.append("with_number_of_seasons.gte", params.minSeasons.toString());
        }
        if (params.withNetworks && params.withNetworks.length > 0) {
          urlParams.append("with_networks", params.withNetworks.join("|"));
        }
      }

      if (type === "movie") {
        if (params.minRuntime && params.minRuntime > 0) {
          urlParams.append("with_runtime.gte", params.minRuntime.toString());
        }
        if (params.maxRuntime && params.maxRuntime > 0) {
          urlParams.append("with_runtime.lte", params.maxRuntime.toString());
        }
      }

      if (params.certification) {
        urlParams.append("certification_country", countryCode);
        urlParams.append("certification", params.certification);
      }

      if (!params.adultContent) {
        urlParams.append("include_adult", "false");
      }

      const url = `${baseUrl}?${urlParams.toString()}`;
      console.log(`üîç TMDB URL: ${url}`);

      const response = await fetch(url);
      const data = await response.json();

      console.log(`üì¶ Page 1: Found ${data.results?.length || 0} results for ${type}`);

      if (data.results && data.results.length > 0) {
        for (const item of data.results) {
          results.push({
            id: item.id,
            title: type === "movie" ? item.title : undefined,
            name: type === "tv" ? item.name : undefined,
            content_type: type === "movie" ? "movie" : "tv_show",
            overview: item.overview,
            poster_path: item.poster_path,
            backdrop_path: item.backdrop_path,
            vote_average: item.vote_average,
            release_date: item.release_date,
            first_air_date: item.first_air_date,
            popularity: item.popularity,
          });
        }
      }

      if (data.total_pages > 1 && results.length < 100) {
        const pagesToFetch = Math.min(5, data.total_pages);
        for (let page = 2; page <= pagesToFetch; page++) {
          try {
            urlParams.set("page", page.toString());
            const pageUrl = `${baseUrl}?${urlParams.toString()}`;
            const pageResponse = await fetch(pageUrl);
            const pageData = await pageResponse.json();

            if (pageData.results && pageData.results.length > 0) {
              for (const item of pageData.results) {
                results.push({
                  id: item.id,
                  title: type === "movie" ? item.title : undefined,
                  name: type === "tv" ? item.name : undefined,
                  content_type: type === "movie" ? "movie" : "tv_show",
                  overview: item.overview,
                  poster_path: item.poster_path,
                  backdrop_path: item.backdrop_path,
                  vote_average: item.vote_average,
                  release_date: item.release_date,
                  first_air_date: item.first_air_date,
                  popularity: item.popularity,
                });
              }
            }

            await new Promise((resolve) => setTimeout(resolve, 100));
          } catch (pageError) {
            console.error(`Error fetching page ${page}:`, pageError);
          }
        }
      }
    } catch (error) {
      console.error(`Error searching ${type}:`, error);
    }
  }

  console.log(`‚úÖ Total results: ${results.length}`);

  if (results.length < 5) {
    console.log(`‚ö†Ô∏è Only ${results.length} results found, trying aggressive fallback...`);

    const fallbackParams = { ...params };

    if (params.minRating && params.minRating > 0) {
      console.log(`üìâ FALLBACK 1: Removing minRating ${params.minRating} entirely`);
      fallbackParams.minRating = 0;
      const fallbackResults = await searchTMDB(fallbackParams, tmdbKey, countryCode, language);
      if (fallbackResults.length >= 5) {
        console.log(`‚úÖ Fallback 1 succeeded: ${fallbackResults.length} results`);
        return fallbackResults;
      }
    }

    if (params.keywords && params.keywords.length > 0) {
      console.log("üìâ FALLBACK 2: Removing keywords");
      fallbackParams.keywords = [];
      fallbackParams.locationKeywords = [];
      const fallbackResults = await searchTMDB(fallbackParams, tmdbKey, countryCode, language);
      if (fallbackResults.length >= 5) {
        console.log(`‚úÖ Fallback 2 succeeded: ${fallbackResults.length} results`);
        return fallbackResults;
      }
    }

    if (params.genres && params.genres.length > 1) {
      console.log(`üìâ FALLBACK 3: Reducing genres to just ${params.genres[0]}`);
      fallbackParams.genres = [params.genres[0]];
      const fallbackResults = await searchTMDB(fallbackParams, tmdbKey, countryCode, language);
      if (fallbackResults.length >= 5) {
        console.log(`‚úÖ Fallback 3 succeeded: ${fallbackResults.length} results`);
        return fallbackResults;
      }
    }

    if (params.providers && params.providers.length > 0) {
      console.log("üìâ FALLBACK 4: Removing provider filter");
      fallbackParams.providers = [];
      const fallbackResults = await searchTMDB(fallbackParams, tmdbKey, countryCode, language);
      if (fallbackResults.length >= 5) {
        console.log(`‚úÖ Fallback 4 succeeded: ${fallbackResults.length} results`);
        return fallbackResults;
      }
    }

    if (params.yearStart !== null || params.yearEnd !== null) {
      console.log("üìâ FALLBACK 5: Removing year range");
      fallbackParams.yearStart = null;
      fallbackParams.yearEnd = null;
      const fallbackResults = await searchTMDB(fallbackParams, tmdbKey, countryCode, language);
      if (fallbackResults.length >= 5) {
        console.log(`‚úÖ Fallback 5 succeeded: ${fallbackResults.length} results`);
        return fallbackResults;
      }
    }

    if (params.productionCountries && params.productionCountries.length > 0) {
      console.log("üìâ FALLBACK 6: Simplifying to ONLY production country + popularity");
      fallbackParams.minRating = 0;
      fallbackParams.genres = [];
      fallbackParams.providers = [];
      fallbackParams.spokenLanguages = [];
      fallbackParams.yearStart = null;
      fallbackParams.yearEnd = null;
      fallbackParams.keywords = [];
      fallbackParams.locationKeywords = [];
      fallbackParams.sortBy = "popularity.desc";
      const fallbackResults = await searchTMDB(fallbackParams, tmdbKey, countryCode, language);
      if (fallbackResults.length >= 5) {
        console.log(`‚úÖ Fallback 6 succeeded: ${fallbackResults.length} results`);
        return fallbackResults;
      }
    }

    if (results.length < 3) {
      console.log("üìâ FALLBACK 7: ULTIMATE - Just contentType + popularity");
      const ultimateParams = {
        contentType: params.contentType || "both",
        sortBy: "popularity.desc",
        minRating: 0,
        genres: [],
        providers: [],
        productionCountries: [],
        spokenLanguages: [],
        yearStart: null,
        yearEnd: null,
      };
      const ultimateResults = await searchTMDB(ultimateParams, tmdbKey, countryCode, language);
      if (ultimateResults.length > results.length) {
        console.log(`‚úÖ Ultimate fallback: ${ultimateResults.length} results`);
        return ultimateResults;
      }
    }
  }

  if (params.maxResults && params.maxResults > 0) {
    return results.slice(0, params.maxResults);
  }

  return results;
}

function getProviderName(providerId: number): string {
  const map: { [key: number]: string } = {
    8: "Netflix",
    9: "Amazon Prime",
    337: "Disney+",
    1899: "HBO Max",
    15: "Hulu",
    350: "Apple TV+",
    531: "Paramount+",
  };
  return map[providerId] || "the platform";
}